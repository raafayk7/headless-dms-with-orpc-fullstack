/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as PrivateRouteImport } from './routes/_private'
import { Route as PrivateIndexRouteImport } from './routes/_private/index'
import { Route as PrivateListsIndexRouteImport } from './routes/_private/lists/index'
import { Route as PublicAuthRegisterRouteImport } from './routes/_public/auth/register'
import { Route as PublicAuthLoginRouteImport } from './routes/_public/auth/login'
import { Route as PrivateListsNewRouteImport } from './routes/_private/lists/new'
import { Route as PrivateListsIdRouteImport } from './routes/_private/lists/$id'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateIndexRoute = PrivateIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateListsIndexRoute = PrivateListsIndexRouteImport.update({
  id: '/lists/',
  path: '/lists/',
  getParentRoute: () => PrivateRoute,
} as any)
const PublicAuthRegisterRoute = PublicAuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAuthLoginRoute = PublicAuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => PublicRoute,
} as any)
const PrivateListsNewRoute = PrivateListsNewRouteImport.update({
  id: '/lists/new',
  path: '/lists/new',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateListsIdRoute = PrivateListsIdRouteImport.update({
  id: '/lists/$id',
  path: '/lists/$id',
  getParentRoute: () => PrivateRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof PrivateIndexRoute
  '/lists/$id': typeof PrivateListsIdRoute
  '/lists/new': typeof PrivateListsNewRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/lists': typeof PrivateListsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof PrivateIndexRoute
  '/lists/$id': typeof PrivateListsIdRoute
  '/lists/new': typeof PrivateListsNewRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/lists': typeof PrivateListsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_private/': typeof PrivateIndexRoute
  '/_private/lists/$id': typeof PrivateListsIdRoute
  '/_private/lists/new': typeof PrivateListsNewRoute
  '/_public/auth/login': typeof PublicAuthLoginRoute
  '/_public/auth/register': typeof PublicAuthRegisterRoute
  '/_private/lists/': typeof PrivateListsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/lists/$id'
    | '/lists/new'
    | '/auth/login'
    | '/auth/register'
    | '/lists'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/lists/$id'
    | '/lists/new'
    | '/auth/login'
    | '/auth/register'
    | '/lists'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/_private/'
    | '/_private/lists/$id'
    | '/_private/lists/new'
    | '/_public/auth/login'
    | '/_public/auth/register'
    | '/_private/lists/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/': {
      id: '/_private/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateIndexRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/lists/': {
      id: '/_private/lists/'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof PrivateListsIndexRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_public/auth/register': {
      id: '/_public/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof PublicAuthRegisterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/auth/login': {
      id: '/_public/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof PublicAuthLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_private/lists/new': {
      id: '/_private/lists/new'
      path: '/lists/new'
      fullPath: '/lists/new'
      preLoaderRoute: typeof PrivateListsNewRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/lists/$id': {
      id: '/_private/lists/$id'
      path: '/lists/$id'
      fullPath: '/lists/$id'
      preLoaderRoute: typeof PrivateListsIdRouteImport
      parentRoute: typeof PrivateRoute
    }
  }
}

interface PrivateRouteChildren {
  PrivateIndexRoute: typeof PrivateIndexRoute
  PrivateListsIdRoute: typeof PrivateListsIdRoute
  PrivateListsNewRoute: typeof PrivateListsNewRoute
  PrivateListsIndexRoute: typeof PrivateListsIndexRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateIndexRoute: PrivateIndexRoute,
  PrivateListsIdRoute: PrivateListsIdRoute,
  PrivateListsNewRoute: PrivateListsNewRoute,
  PrivateListsIndexRoute: PrivateListsIndexRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface PublicRouteChildren {
  PublicAuthLoginRoute: typeof PublicAuthLoginRoute
  PublicAuthRegisterRoute: typeof PublicAuthRegisterRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAuthLoginRoute: PublicAuthLoginRoute,
  PublicAuthRegisterRoute: PublicAuthRegisterRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
